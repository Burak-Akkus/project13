#include <string.h>

/* XDCtools Header files */
#include <xdc/runtime/Error.h>
#include <xdc/runtime/System.h>

/* TI-RTOS Header files */
#include <ti/sysbios/BIOS.h>
#include <ti/sysbios/knl/Task.h>
#include <ti/sysbios/knl/Swi.h>
#include <ti/sysbios/knl/Queue.h>
#include <ti/sysbios/knl/Event.h>
#include <ti/sysbios/knl/Idle.h>
#include <ti/sysbios/knl/Mailbox.h>
#include <ti/sysbios/knl/Clock.h>
#include <ti/sysbios/knl/Semaphore.h>
#include <ti/drivers/GPIO.h>
#include <ti/net/http/httpcli.h>

/* Example/Board Header file */
#include "Board.h"

#include <sys/socket.h>

#define HOSTNAME          "api.openweathermap.org"
#define REQUEST_URI       "/data/2.5/forecast/?id=315202&APPID=96c05b3c27bdc0565b8287d29e6f8ac7"
#define USER_AGENT        "HTTPCli (ARM; TI-RTOS)"
#define SOCKETTEST_IP     "192.168.1.6"
#define TASKSTACKSIZE     4096

extern Semaphore_Handle semaphore0;
extern Semaphore_Handle semaphore1;
extern Semaphore_Handle semaphore2;
extern Event_Handle event0;
char   tempstr[20];
char   humidstr[20];


void printError(char *errString, int code)
{
    System_printf("Error! code = %d, desc = %s\n", code, errString);
    BIOS_exit(code);
}

void sendData2Server(char *serverIP, int serverPort, char *data, int size)
{
    int sockfd;
    struct sockaddr_in serverAddr;

    sockfd = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);
    if (sockfd == -1) {
        System_printf("Socket not created");
        BIOS_exit(-1);
    }

    memset(&serverAddr, 0, sizeof(serverAddr));  /* clear serverAddr structure */
    serverAddr.sin_family = AF_INET;
    serverAddr.sin_port = htons(serverPort);     /* convert port # to network order */
    inet_pton(AF_INET, serverIP, &(serverAddr.sin_addr));

    int connStat = connect(sockfd, (struct sockaddr *)&serverAddr, /* connectingâ€¦.*/
                  sizeof(serverAddr));
    if(connStat < 0) {
        System_printf("Error while connecting to server\n");
        if (sockfd > 0)
            close(sockfd);
        BIOS_exit(-1);
    }

    int numSend = send(sockfd, data, size, 0);       /* send data to the server*/
    if(numSend < 0) {
        System_printf("Error while sending data to server\n");
        if (sockfd > 0) close(sockfd);
        BIOS_exit(-1);
    }

    if (sockfd > 0) close(sockfd);
}

Void socketTask(UArg arg0, UArg arg1)
{
    while(1) {
        // wait for the semaphore that httpTask() will signal
        // when both temperature and humidity strings are retrieved from api.openweathermap.org site

        Semaphore_pend(semaphore0, BIOS_WAIT_FOREVER);

        GPIO_write(Board_LED0, 1); // turn on the LED

        // connect to SocketTest program on the system with given IP/port
        sendData2Server(SOCKETTEST_IP, 5011, tempstr, strlen(tempstr));
        sendData2Server(SOCKETTEST_IP, 5011, humidstr, strlen(humidstr));

        GPIO_write(Board_LED0, 0);  // turn off the LED
        Task_sleep(5000);
    }
}

/*
 *  ======== httpTask ========
 *  Makes a HTTP GET request
 */
Void httpTask(UArg arg0, UArg arg1)
{
    bool moreFlag = false;
    char data[64], *s1, *s2, *s3, *s4;
    int ret, temp_received=0, humid_received=0, len;
    struct sockaddr_in addr;

    HTTPCli_Struct cli;
    HTTPCli_Field fields[3] = {
        { HTTPStd_FIELD_NAME_HOST, HOSTNAME },
        { HTTPStd_FIELD_NAME_USER_AGENT, USER_AGENT },
        { NULL, NULL }
    };

    while(1) {
        Event_pend(event0, Event_Id_00 + Event_Id_01, Event_Id_NONE, BIOS_WAIT_FOREVER);//Wait on both left and right hand movement events

        System_printf("Sending a HTTP GET request to '%s'\n", HOSTNAME);
        System_flush();

        HTTPCli_construct(&cli);

        HTTPCli_setRequestFields(&cli, fields);

        ret = HTTPCli_initSockAddr((struct sockaddr *)&addr, HOSTNAME, 0);
        if (ret < 0) {
            printError("httpTask: address resolution failed", ret);
        }

        ret = HTTPCli_connect(&cli, (struct sockaddr *)&addr, 0, NULL);
        if (ret < 0) {
            printError("httpTask: connect failed", ret);
        }

        ret = HTTPCli_sendRequest(&cli, HTTPStd_GET, REQUEST_URI, false);
        if (ret < 0) {
            printError("httpTask: send failed", ret);
        }

        ret = HTTPCli_getResponseStatus(&cli);
        if (ret != HTTPStd_OK) {
            printError("httpTask: cannot get status", ret);
        }

        System_printf("HTTP Response Status Code: %d\n", ret);

        ret = HTTPCli_getResponseField(&cli, data, sizeof(data), &moreFlag);
        if (ret != HTTPCli_FIELD_ID_END) {
            printError("httpTask: response field processing failed", ret);
        }

        len = 0;
        do {
            ret = HTTPCli_readResponseBody(&cli, data, sizeof(data), &moreFlag);
            if (ret < 0) {
                printError("httpTask: response body processing failed", ret);
            }
            else {
                // string is read correctly
                s1=strstr(data, "temp");// find "temp:" string in data and give it's starting address to s1
                s3=strstr(data, "humidity");// find "humidity:" string in data and give it's starting address to s3
                if(s1) {                            // if s1 is not null, which means "temp" string is found
                    if(temp_received) continue;     // temperature is retrieved before, continue
                    s2=strstr(s1, ","); // search for comma since that is where the value ends
                    if(s2) { // if s2 is not null, which means "," is found
                        *s2=0;                      // Make the string in that address equal to 0 to put an end point
                        strcpy(tempstr, s1+6);      // copy the string starting from 6 points away from s1 which corresponds to the value
                        temp_received = 1;
                    }
                }
                if(s3){                              // if s3 is not null, which means "humidity" string is found
                    if(humid_received) continue;     // humidity is retrieved before, continue
                        s4=strstr(s3, ",");          // search for comma since that is where the value ends
                        if(s4) {                     // if s4 is not null, which means "," is found
                            *s4=0;                   // Make the string in that address equal to 0 to put an end point
                            strcpy(humidstr, s3+10); // copy the string starting from 10 points away from s1 which corresponds to the value
                            humid_received = 1;
                        }
                }
            }

            len += ret;     // update the total string length received so far
        } while (moreFlag);

        System_printf("Recieved %d bytes of payload\n", len);
        System_flush();
        System_printf("Temperature %s\n", tempstr);
        System_flush();
        System_printf("Humidity %s\n", humidstr);
        System_flush();
        HTTPCli_disconnect(&cli);                               // disconnect from openweathermap

        Semaphore_post(semaphore0);                             // activate socketTask
        Semaphore_post(semaphore1);                             // activate LeftTask
        Task_sleep(5000);                                       // sleep 5 seconds
    }
    HTTPCli_destruct(&cli);
}

Void LeftTask(UArg arg0, UArg arg1){
    /*This task should normally pend on a semaphore produced by the left reading value from paj7620 sensor
     * However in spite of all the efforts put in to reading the sensor value, there was no successful reading
     * Thus, this task assumes the reading "left" is coming from the sensor.
     * */
    while(1){
        Semaphore_pend(semaphore1, BIOS_WAIT_FOREVER); // semaphore1 has an initial value 1 to prevent the deadlock
        System_printf("Left hand movement is detected\n");
        System_flush();
        Task_sleep(3000); // this sleep is put just to make it more clear to read in console
        Event_post(event0, Event_Id_00); // notify httpTask that left hand movement arrived
        Semaphore_post(semaphore2);  // RightTask can continue to run as if paj7620 sensor has detected right hand movement
    }
}

Void RightTask(UArg arg0, UArg arg1){
    /*This task should normally pend on a semaphore produced by the "right" reading value from paj7620 sensor
     * However in spite of all the efforts put in to reading the sensor value, there was no successful reading
     * Thus, this task assumes the reading "right" is coming from the sensor.
     * */
    while(1){
        Semaphore_pend(semaphore2, BIOS_WAIT_FOREVER);
        System_printf("Right hand movement is detected\n");
        System_flush();
        Task_sleep(3000); // this sleep is put just to make it more clear to read in console
        Event_post(event0, Event_Id_01); // now that both left and right movements are detected,
    }                                    // pending event in httpTask will continue
}

/*
 *  ======== netIPAddrHook ========
 *  This function is called when IP Addr is added/deleted
 */
void netIPAddrHook(unsigned int IPAddr, unsigned int IfIdx, unsigned int fAdd)
{
       static Task_Handle taskHandle1, taskHandle2;
       Task_Params taskParams;
       Error_Block eb;

       // Create a HTTP task when the IP address is added
       if (fAdd && !taskHandle1 && !taskHandle2) {
          Error_init(&eb);

       Task_Params_init(&taskParams);
       taskParams.stackSize = TASKSTACKSIZE;
       taskParams.priority = 1;
       taskHandle1 = Task_create((Task_FuncPtr)httpTask, &taskParams, &eb);

       Task_Params_init(&taskParams);
       taskParams.stackSize = TASKSTACKSIZE;
       taskParams.priority = 1;
       taskHandle2 = Task_create((Task_FuncPtr)socketTask, &taskParams, &eb);

       if (taskHandle1 == NULL || taskHandle2 == NULL) {
           printError("netIPAddrHook: Failed to create HTTP and Socket Tasks\n", -1);
       }
   }
}

/*
 *  ======== main ========
 */
int main(void)
{
    /* Call board init functions */
    Board_initGeneral();
    Board_initGPIO();
    Board_initEMAC();

    /* Turn on user LED */
    GPIO_write(Board_LED0, Board_LED_ON);

    System_printf("Starting the HTTP GET example\nSystem provider is set to "
            "SysMin. Halt the target to view any SysMin contents in ROV.\n");
    /* SysMin will only print to the console when you call flush or exit */
    System_flush();


    /* Start BIOS */
    BIOS_start();

    return (0);
}
